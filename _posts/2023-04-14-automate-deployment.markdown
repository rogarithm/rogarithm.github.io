---
layout: post
title: 자동화, 어떻게 시작해야할까?
date: 2023-04-14 21:18:23
categories: 
---
* table of contents
{:toc}

&nbsp;

개발자는 반복적인 작업을 자동화함으로써 더 중요한 업무에 집중하기 위해 노력한다. 토이 프로젝트이던, 회사에서 하는 업무던지 간에, 프로그램을 짜다보면 '이거 자동화하면 편할 것 같은데?' 싶을 때가 종종 있다. 하지만 내가 실제로 업무를 자동화하려고 했을 때 어떻게 구현해야할지 막막한 상태로 시간만 날린 적이 많았다. 이 글에서는 실제로 배포 작업을 자동화하면서 하게 된 고민과 그 고민을 어떻게 풀어냈는지를 통해 반복 업무를 자동화할 때 참고할 만한 경험을 공유하고자 한다.

&nbsp;

### 자동화해야 할 이유를 찾아보자

다른 작업과 같이 자동화 작업 역시 시간과 품이 들어가는 작업이다. 자동화할 수 있는 작업이더라도 그 작업의 빈도가 낮거나 특별히 불편한 점이 없다면 자동화하지 않는 선택을 할 수도 있다.

배포 작업 자동화 구현도 시간이 많이 들어가는 작업이었다. 그런데도 나는 왜 자동화하기로 결정했을까?

- 배포 작업의 빈도가 높았다. 새로 기능을 구현하거나 버그를 고치기 위해 소스 코드를 변경하면, 이 변경 사항을 서버에 반영하기 때문이다.
- 배포 작업을 완료하기까지 반복적인 명령을 입력하는 단계가 많았다. 그렇다보니 명령을 잘못 입력해서 작업 시간이 늘어나는 경우가 있었다.
- 실행 명령을 입력하기가 번거로웠다. DB 사용자명이나 비밀번호 등의 민감정보를 노출하지 않으려고 명령에 환경 변수로 추가해서 입력해야할 명령이 길어졌고, 작업 시간이 늘어났다.
- 프로젝트에 스케일 아웃을 도입하면서 배포 과정에 드는 시간이 두 배로 늘어났고, 덩달아 관리할 민감 정보도 두 배로 늘어났다.

실행 명령을 스크립트로 만들어서 배포할 때마다 명령 입력 시간을 줄이기도 했지만, 문제를 완전히 해결하지 못했다. 주입할 값이 바뀌거나 스케일 아웃으로 서버가 늘어나면 원격 서버마다 스크립트를 수정해야 해서 또 다른 관리 포인트가 되어버렸다.

이러한 점들을 고려해보니 배포 자동화를 통해 배포하면서 생길 수 있는 실수를 줄이고, 배포에 걸리는 시간을 줄일 수 있을 것으로 기대할 수 있었다. 그래서 노력을 들일만한 작업이라고 판단해 배포 자동화를 구현하기로 결정했다.

&nbsp;

&nbsp;

### 자동화하려면 어떤 고민을 해야할까?

어떻게 시작할지 막연할 때가 있다. 처음 배포 작업을 어떻게 구현할지 알아볼 때, 블로그나 기술 문서를 찾아봐도 내 상황에 딱 들어맞는 예를 찾기 어려웠고, 젠킨스나 깃헙액션 같은 기술을 처음부터 공부해보다가 그 깊이에 압도되어 지치기도 했다. 지금 내가 어느 정도 수준인지 피드백을 얻기 힘든 채로 '내가 필요한 걸 구현할 수준'이 될 때까지 공부한다는 압박감에 더 피로감을 느끼게 되는 것 같다.

나는 토머스 리먼첼리가 쓴 \<시스템 관리자를 위한 시간관리 전략\> 이라는 책에서 힌트를 얻었다.

![책](/images/automate-book.png){: width="300" height="400"}

비록 배포 자동화에 대해선 나와있지 않지만, 작업을 자동화할 때 어떤 단계를 밟아야할지 나와 있다. 저자는 어떤 과정을 자동화하기 위해서 

1. 먼저 그 과정을 수동으로도 수행할 수 있음을 확인한다
2. 

그래서 먼저 수동으로 배포하는 과정을 정리해보기로 했다.

&nbsp;

#### 수동 작업 과정을 문서화해보자

정리해보니 이런 식으로 수동 배포하고 있었다.

1. 로컬 머신에서 빌드 도구로 소스를 빌드해 jar 파일(이하 아티팩트)을 만든다
2. ftp 앱으로 원격 서버에 접속해서 로컬 머신에 있는 아티팩트를 원격 서버로 전송한다
3. 로컬 머신에서 ssh로 원격 서버에 접속 후 원격 서버에서 애플리케이션을 실행한다

&nbsp;

#### 문서화한 내용을 기반으로 자동화해보자

정리한 수동 배포 과정을 토대로 자동화를 구현했다.

**어떤 기술을 써야할까?**

프로젝트에서 이미 쓰는 기술 중에 자동화에 적용할 수 있는 기술이 있다면 그 기술을 썼다. 이외 자동화할 과정에 적용할 기술이 정해지지 않은 것은 이미 쓰는 기술과 잘 연동되는 것이 있는지 찾아봤다.
CD 구현에 쓸 기술의 경우, 프로젝트에서 이전에 CI(빌드와 테스트를 자동으로 실행)를 깃헙 액션으로 구현했는데, 그래서 CD에도 깃헙 액션을 이용하기로 했다.
젠킨스도 고려해봤지만, 이전에 CI 구현할 때 알아본 내용을 참고할 수 있으니 다른 기술을 새로 알아보는 데 시간을 들이는 것에 비해 효율적이라고 생각했다.

CD 툴로는 깃헙 액션을 썼다. CD에 들어갈 자동화 작업 중 바로 가져다 쓸 수 있는 액션이 있는 경우는 그걸 쓰고, 없다면 쉘 스크립트로 만들어서 깃헙 액션 yaml 스크립트에 넣었다.

**어떤 과정으로 진행되나?**

1. 파일 전송: 원격 서버로 아티팩트를 전송하기 이전에 먼저 깃헙액션 서버로 아티팩트를 전송하고, 깃헙액션 서버에서 원격 서버로 아티팩트를 전송한다.

**파일 전송 자동화**

깃헙액션에서 ftp 기능을 쓸 수 있도록 구현된 액션을 가져다 썼다.

**원격 서버에 접속하기**

원격 서버가 전송받은 아티팩트로 애플리케이션을 띄우려면 로컬에서 원격 서버로 직접 접속하지 않고, 깃헙 액션 서버에서 원격 서버에 ssh로 접속해 필요한 쉘 명령을 실행해야 한다.

**애플리케이션을 실행하는 명령**

애플리케이션을 다시 실행하는 명령의 경우, 같은 환경이 설정된 서버 두 대에 동일한 명령으로 애플리케이션을 실행하기 때문에 하나의 명령으로 두 개의 서버에 적용할 수 있도록 하려고 했지만, 사용하는 ssh action에서 원래 제공하지 않는건지, 가능하지 않아서 각 서버마다 따로 명령을 실행하도록 구현했다.
이렇게 구현할 경우 생길 수 있는 문제는 서버 대수가 늘어날수록 깃헙 액션 코드가 늘어날 테고, 변경해야 할 경우 바꿔야 할 코드의 양이 증가할 것이다. 이 부분은 더 고민해봐야겠다는 생각을 했다.

#### 수동 배포 과정을 자동화할 때 나타난 문제

자동화하는 과정에서 추가로 해결해야 할 점을 발견했다.

1. **GUI 애플리케이션을 이용하는 작업은 그대로 자동화하기 어렵다**
아티팩트를 서버로 전송할 때 쓰는 filezilla는 GUI 기반 애플리케이션이기 때문에 파일을 전송하려면 마우스를 써야 한다. 만약 이 과정을 자동화한다면 마우스를 어디로 움직이고 어디를 클릭할지를 자동화해야하지 않을까 생각이 들었다. 하지만 이 방식은 현실적으로 불가능해 보였고, 대신 커맨드라인 기반으로 ftp를 실행할 수 있는 방법이 있는지 알아봤다.

&nbsp;

&nbsp;

### 결론

자동화한 이후로 배포 과정 중 생길 수 있는 실수를 걱정하지 않아도 되게 되었다. 때문에 언제든 배포해서 테스트해봐야 하면 바로 배포해볼 수 있게 되었다.

인터넷에서 찾을 수 있는 자료는 많지만, 내 상황에 딱 들어맞는 예제를 찾기는 쉽지 않다. 찾는 데 시간을 쏟기보다는 내가 처한 상황에서 자동화해야 할 문제를 분석하고 그에 맞는 해결책을 찾는 게 오히려 더 효율적이었다.

막연하게 생각만 했을 때보다 실제로 어떻게 구현할지를 고민하면서 생각하지 못했던 점들을 발견했다.

비록 자동화를 구현했지만, 막상 자동화 툴로 쓴 깃헙 액션에 대해서는 쓸만한 내용이 없다는 점에서 배포 자동화 도구에 대한 이해가 깊지 않다는 걸 느꼈고, 더 공부가 필요하다고 느꼈다. 또한 깃헙 액션으로 스크립트를 짤 때 쓴 쉘 스크립트의 동작도 잘 모르는 부분이 많은 것을 알았다.

하지만 여기 나온 내용은 자동화를 시도할 때 충분히 유용할 것이라고 생각한다.
