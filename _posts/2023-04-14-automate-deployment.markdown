---
layout: post
title: 자동화, 어떻게 해야할까?
date: 2023-04-14 21:18:23
categories: 
---
* table of contents
{:toc}

&nbsp;

개발자는 반복적인 작업을 자동화함으로써 더 중요한 업무에 집중할 수 있다. 토이 프로젝트이던, 회사에서 하는 업무던지 간에, 프로그램을 짜다보면 '이거 자동화하면 편할 것 같은데?' 싶을 때가 종종 있다.

하지만 실제로 자동화하려고 할 때 어떻게 진도를 나갈지 막막한 적이 많았고, 그럴 때마다 '이럴 때 도움 될 만한 글이 있었으면 좋겠다'고 생각했다. 시행착오를 거치면서 전보다 많이 알게 된 지금, 내가 처음 작업을 자동화할 때 알았다면 좋았을 얘기들을 배포 작업을 자동화하는 과정을 예시로 들어 썼다.

&nbsp;

### 시작하기 전에 먼저...

#### 자동화로 얻을 손익을 따져보자

다른 작업과 마찬가지로 자동화 작업 역시 시간과 품이 들어가는 작업이다. 작업에 들이는 시간에 비해 자동화했을 때 얻을 이익이 크지 않다면 차라리 자동화하지 않는 게 나을수도 있다.

| ![손익 따져보기](/images/automate-deploy/xkcd-the_general_problem_kor.png) |
|:--------------------------------------------------------------------------:|
|                           xkcd 에피소드 974 [^1]                           |

&nbsp;

배포 작업도 자동화에 시간이 많이 들어가는 작업이었다. 그런데도 자동화하기로 결정했던 몇 가지 이유가 있었다.

- 작업 빈도가 높았다. 기능을 구현하거나 버그를 고치려고 소스 코드를 변경하고 나면, 배포해서 변경 사항을 서버에 반영했기 때문이다.
- 작업 시간이 오래 걸렸다. 작업 중 입력해야 할 명령이 길었기 때문이다. 반복적으로 명령을 입력하다가 잘못 입력할 때도 있었다.
- 프로젝트에 스케일 아웃을 도입하면서 배포 과정에 드는 시간이 두 배로 늘어났고, 덩달아 관리할 민감 정보도 두 배로 늘어났다. 때문에 작업 빈도와 시간 모두 더 늘어났다.

실행 명령을 스크립트로 만들어서 작업 시간을 줄여보려고도 했지만, 오히려 스크립트 관리에 시간이 들어가서 그다지 깔끔한 해결책은 아니었다. 배포 작업을 자동화하면 이런 문제점을 더 깔끔하게 해결할 수 있을 것으로 생각되어 자동화하기로 결정했다.

&nbsp;

&nbsp;

#### 뭐부터 시작해야할까?

자동화하려고 하니 뭐부터 해야할지 막연했다. 일단 생각나는 것부터 뭐라도 만들어보는 게 나을까? 아니면 기술 문서부터 읽고나서 만드는 게 나을까? 고민하던 차에 예전에 읽었던 책에서 힌트를 얻었다.


| ![책](/images/automate-deploy/automate-book.png){: width="300" height="400"} |
|:----------------------------------------------------------------------------:|
|                 \<시스템 관리자를 위한 시간관리 전략\> [^2]                  |

&nbsp;
 
토머스 리먼첼리가 쓴 \<시스템 관리자를 위한 시간관리 전략\> 에서는 어떤 작업을 자동화할 때 단계적으로 해나갈 것을 제안한다. 비록 배포 자동화에 대해 설명하진 않지만, 해야 할 작업을 계획하는 데 책에 나온 내용을 참고할 수 있었다.

&nbsp;

&nbsp;

### 자동화해보자

책에서 조언하는 자동화 진행 순서가 있지만, 나는 책에서 제시하는 단계를 그대로 따라하기보단 나한테 맞게 적용했다. 어렵지 않게 해볼 수 있는 단계를 우선 적용하고, 나머지 단계는 나중에 필요해질 경우 적용했다. 이런 순서로 작업했다.

1. 수동으로 작업하는 각 단계를 문서화한다
2. 자동화에 쓸 기술을 정한다
3. 자동화 발동 조건을 정한다
4. 각 단계를 자동화한다
5. 자동화한 코드가 올바른지 테스트한다

각 단계별로 알아보겠다.

&nbsp;

#### 수동 작업 과정을 문서화해보자
 
우선 수동으로 배포 작업하는 과정을 문서로 정리했다. '자주 해서 이미 잘 아는데 굳이 문서로 정리할 필요가 있을까?' 하는 생각이 들 수 있다(내가 그랬다). 하지만 손에 익은 작업이더라도 문서로 만들면서 생각이 정리되었고, 미처 몰랐던 부분을 알게 되기도 했다.

정리해보니 나는 수동 배포 작업을 이렇게 하고 있었다.

1. 로컬 머신에서 빌드 도구로 소스 코드를 빌드해 jar 파일(이하 아티팩트)을 만든다
2. ftp 앱으로 원격 서버에 접속해서 로컬 머신에 있는 아티팩트를 원격 서버로 전송한다
3. 로컬 머신에서 ssh로 원격 서버에 접속 후 애플리케이션을 실행한다

![수동 배포 과정](/images/automate-deploy/deploy-flow-manual.png)

&nbsp;

#### 자동화에 쓸 기술을 정하자

정리한 수동 배포 과정을 토대로 각 단계를 자동화하기 위해 어떤 기술을 써야할지 고민했다. 어떤 기준으로 기술을 정해야 할까? 나는 배포 자동화에 쓸 기술을 정하면서 이런 점을 중점적으로 생각했다.

- **프로젝트에서 이미 쓰고 있고, 알고 있는 기술**을 자동화하려는 작업에 적용할 수 있는지 알아봤다. 대체할 수 있는 다른 기술이 있더라도 다른 기술을 선택할 경우 어떻게 쓰는지 익히는 데 드는 시간이 더 걸릴 수 있기 때문이다.
- 직접 **구현하지 않더라도 가져다 쓸 수 있는 플러그인**이 있는지 알아봤다. 작업 단계 자동화를 직접 구현하지 않고 간단히 가져다 쓸 수 있다면 구현에 드는 시간이 줄어들 것이라고 예상했기 때문이다.

이런 점을 고려해 깃헙 액션을 이용하기로 결정했다. 프로젝트에서 이미 쓰고 있던 깃헙 액션을 적용할 수 있었고, 미리 구현된 플러그인(액션)으로 작업 단계를 쉽게 자동화할 수 있을 것으로 기대했다.

&nbsp;

#### 자동화 발동 조건을 고려하자

작업을 언제 자동으로 실행해야할지도 중요하다. 이런 발동 조건은 다음 세 가지로 나눌 수 있다.

- 명령 입력 시 실행하거나 (ex. 셸 스크립트)
- 특정 시간마다 실행하거나 (ex. crontab)
- 어떤 이벤트 발생 시점에 실행하거나

배포 자동화의 발동 조건을 고려할 때는 어떤 조건을 적용했을 때 가장 생산적일지를 고민해봤다. 자동화를 도입하려는 프로젝트는 git과 github을 써서 버전 관리를 하고 있었고, github branch 전략을 도입해 PR 단위로 기능을 구현하고 있었다. 따라서 코드 리뷰 후 PR이 마무리되어 원격 저장소의 메인 브랜치에 병합하는 시점이 배포 작업을 자동으로 실행하기 적절하다고 생각되었다.

&nbsp;

#### 수동 작업을 자동화하자

다음으로 문서화한 단계를 자동화했다. 먼저 깃헙 액션을 어떻게 적용할 수 있을지 알아보았다. 이때 앞서 수동 작업 단계를 문서화한 것이 도움이 되었다. 기존 작업 과정과 깃헙 액션을 이용했을 때 작업 단계를 비교하면서 자동화했을 때 작업 단계가 어떻게 달라지는지를 이해하기가 더 수월했기 때문이다.

깃헙 액션을 적용하면 기존 배포 과정은 다음과 같이 달라지게 된다.

1. 로컬 머신은 수정한 소스 코드를 깃허브에 push한다
2. 깃헙액션 서버는 로컬 머신이 깃허브에 push한 최신 커밋의 소스 코드를 받아온다
3. 깃헙액션 서버는 빌드 도구로 소스 코드를 빌드해 jar 파일(이하 아티팩트)을 만든다
4. 깃헙액션 서버는 ftp 앱으로 원격 서버에 접속해서 아티팩트를 원격 서버로 전송한다
5. 깃헙액션 서버는 ssh로 원격 서버에 접속 후 애플리케이션을 실행한다

![자동 배포 과정](/images/automate-deploy/deploy-flow-automatic-one-server.png)

기존 과정이 3~5단계로 바뀌었고, 그 앞에 1, 2단계가 추가되었다. 기존에는 로컬 머신이 모든 작업을 담당했지만, 깃헙 액션 서버가 이 역할을 담당하도록 바뀌게 된다. 로컬 머신이 해야 할 일은 변경한 소스 코드를 깃헙 저장소에 푸시하는 것밖에 없어진다. 그러고 나면 깃헙 액션 서버가 나머지 일을 처리한다.

자동화하려는 배포 작업의 각 단계 중 쓸 수 있는 플러그인이 있다면 활용하고, 없을 경우 셸 스크립트를 구현해서 깃헙액션 스크립트에 넣었다.

잘 모르는 기술을 어떻게 써야할지 처음부터 필요한 수준까지 공부해서 바닥부터 구현하기보다는 블로그나 깃허브, 기술 문서의 튜토리얼에서 내 상황과 비슷한 예시의 소스 코드를 가져와서 내 프로젝트에 맞게 바꿔나가면서 모르는 부분을 조사하면서 진행했다.

공식 문서를 읽으면서 이론을 먼저 공부해보기도 했지만, 읽는 데 시간이 오래 걸리기도 했고, 읽은 것 만으로는 제대로 이해했는지 피드백을 받기까지 시간이 오래 걸려 쉽게 지쳤다. 그보다는 동작하는 예를 찾아서 실제로 어떻게 돌아가는지 직접 확인하면서 진도를 나가는 게 더 수월했다.

&nbsp;

#### 잘 동작하는지 테스트로 확인하자

구현한 게 한 번에 잘 동작하면 좋겠지만, 그렇지 않을 수 있다. 그래서 잘 동작하는지 테스트가 필요하다. 나는 배포 자동화를 테스트할 원격 저장소를 만들어 테스트했다. 자동 배포가 트리거되도록 한 뒤 예상한 동작을 하는지 반복해서 확인하고, 문제가 있으면 코드를 바꿔서 다시 테스트했다.

| ![테스트](/images/automate-deploy/test-automation.png) |
|:------------------------------------------------------:|
|       오래 걸리지만 수동으로도 테스트할 수 있다.       |

&nbsp;

나는 모든 단계에 대한 자동화 코드를 전부 짠 상태에서 테스트를 시작했는데, 이러면 테스트하기가 번거롭다. 문제의 원인이 되는 곳을 찾기가 어렵기 때문이다. 주석처리해서 확인하려는 단계만 테스트할 수 있었지만, 가능하다면 단계별로 구현하고 바로 테스트하는 편이 나은 것 같다.

테스트할 때 피드백 주기가 적절히 짧은지도 중요했다. 피드백 주기가 길면 테스트 횟수가 많아질수록 구현까지 드는 시간도 그만큼 늘어나기 때문에 피드백 주기가 짧은 것이 유리하다.

배포 작업을 실행할 조건은 PR을 메인 브랜치로 머지했을 때였지만, 이 조건대로면 테스트 결과를 한 번 확인하는 데도 PR을 새로 만들고 머지해야 해서 시간이 너무 오래 걸릴 것이다. 피드백 주기를 짧게 하기 위해 테스트할 때는 배포 작업 실행 조건을 원격 저장소에 push하는 것으로 설정했다.

&nbsp;

&nbsp;

### 결론

자동화한 이후로 배포 과정 중 생길 수 있는 실수를 걱정하지 않아도 되게 되었다. 때문에 언제든 배포해서 테스트해봐야 하면 바로 배포해볼 수 있게 되었다.

팀원에게 더 빨리

인터넷에서 찾을 수 있는 자료는 많지만, 내 상황에 딱 들어맞는 예제를 찾기는 쉽지 않다. 찾는 데 시간을 쏟기보다는 내가 처한 상황에서 자동화해야 할 문제를 분석하고 그에 맞는 해결책을 찾는 게 오히려 더 효율적이었다.

비록 자동화를 구현했지만, 막상 자동화 툴로 쓴 깃헙 액션에 대해서는 쓸만한 내용이 없다는 점에서 배포 자동화 도구에 대한 이해가 깊지 않다는 걸 느꼈고, 더 공부가 필요하다고 느꼈다. 또한 깃헙 액션으로 스크립트를 짤 때 쓴 쉘 스크립트의 동작도 잘 모르는 부분이 많은 것을 알았다.

애플리케이션을 실행하는 명령의 경우, 같은 환경이 설정된 서버 두 대에 동일한 명령으로 애플리케이션을 실행하기 때문에 하나의 명령으로 두 개의 서버에 적용할 수 있도록 하려고 했지만, 사용하는 ssh action에서 원래 제공하지 않는건지, 가능하지 않아서 각 서버마다 따로 명령을 실행하도록 구현했다.
이렇게 구현할 경우 생길 수 있는 문제는 서버 대수가 늘어날수록 깃헙 액션 코드가 늘어날 테고, 변경해야 할 경우 바꿔야 할 코드의 양이 증가할 것이다. 이 부분은 더 고민해봐야겠다는 생각을 했다.

배포 자동화를 적용한 프로젝트는 [여기](https://github.com/rogarithm/sool-dam-a)서, 깃헙액션 스크립트는 [여기](https://github.com/rogarithm/sool-dam-a/blob/main/.github/workflows/deploy-on-merge.yml)서 확인할 수 있다.

&nbsp;

---
[^1]: 원본은 [https://xkcd.com/974](https://xkcd.com/974/), 번역본은 [여기](https://twitter.com/nagato708/status/736477592023224320?s=20)서 확인할 수 있다.

[^2]: 시스템 관리자를 위한 시간관리 전략. 토머스 리먼첼리 저, 한빛 미디어. 현재 절판 상태다. 도서관에서 빌려 보거나 중고 도서를 구매해야 볼 수 있다.
