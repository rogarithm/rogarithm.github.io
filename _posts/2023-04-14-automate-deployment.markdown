---
layout: post
title: 
date: 2023-04-14 21:18:23
categories: 
---
* table of contents
{:toc}

프로젝트를 하다 보면 자동화하면 좋을 것 같은 경우를 자주 만난다. 자동화가 가능하다면 좋겠지만 가능한지 막연한 때도 있다. 술담아 프로젝트를 하면서 수동으로 하고 있던 배포 과정도 그런 경우였다. 이 글을 통해 왜 자동화하면 좋겠다고 느꼈는지, 어떻게 자동화를 구현할지 고민하고 구현하는 과정을 기록해보고자 했다.

### 수동 배포 방식의 불편함

웹 애플리케이션을 개발하다 보면 배포 작업을 자주 하게 된다. 새로 기능을 구현하거나 버그를 고치기 위해 소스 코드를 변경하고 나면 변경 사항을 적용한 최신 버전의 애플리케이션이 서버에서 동작하도록 반영하기 위해서다.

기존에 배포를 매번 수동으로 했는데, 배포 작업을 하면서 불편한 점이 여러가지 생겼다.

- 애플리케이션을 배포하기까지 여러 단계를 거쳐야 하는데, 단계마다 실수할 수가 있고, 배포 빈도가 높아질수록 반복적으로 동일한 작업을 하다가 실수할 가능성이 높아졌다.
- 실행 명령이 바뀔 수 있고, 이를 관리하기가 번거로웠다. DB 사용자명이나 비밀번호 등의 민감정보를 노출하지 않기 위해 애플리케이션 실행 명령의 환경 변수로 설정했는데, 이 때문에 명령이 다소 길어졌다.
- 배포할 때마다 명령을 일일이 치기는 번거로워서 스크립트로 만들어 원격 서버 안에 두고 써서 민감 정보를 노출하지 않게 되었고, 애플리케이션을 실행할 때마다 입력해야할 명령의 길이는 줄어들었다. 하지만 여전히 관리가 번거로웠다. 주입할 값이 바뀌거나 서버가 늘어나면 애플리케이션을 실행할 원격 서버에 일일이 접속해서 바꿔줘야 하기 때문이었다.
- 프로젝트에 스케일 아웃을 도입하면서 배포 과정에 드는 시간은 두 배로 늘어났고, 관리할 민감 정보도 덩달아 두 개로 늘어났다.

만약 배포 과정을 자동화하면 배포하면서 일어날 수 있는 실수를 줄일 수 있고, 배포할 때 걸리는 시간을 절약할 수 있을 것으로 기대해서 배포 자동화를 구현하기로 했다.

### 배포 자동화 구현 과정

어떻게 자동화를 시작할지 막연했다. 전에 시간 관리를 어떻게 할지 알아볼 요량으로 샀던 책에 자동화에 대한 내용이 있었던 게 기억났다. 토머스 리먼첼리가 쓴 \<시스템 관리자를 위한 시간관리 전략\> 이라는 책이다. 비록 배포 자동화를 어떻게 할지에 대해선 나와있지 않지만, 작업을 자동화하려면 어떤 단계를 밟아나가야할지 한 장을 할애해서 설명한다. 저자는 "어떤 과정을 자동화하기 위한 첫 단계는 그 과정을 수동으로도 수행할 수 있음을 확인하는 것"이라고 했다.

그래서 수동으로 배포하는 과정을 먼저 정리해보기로 했다.

#### 수동 배포 진행 단계

수동 배포 과정은 간단히 이렇게 진행된다.

1. 로컬 머신에서 소스를 빌드한다
2. 빌드한 파일을 원격 서버로 전송한다
3. 원격 서버에서 애플리케이션을 실행한다

조금 더 자세하게 보자면,

로컬 머신에서 빌드 도구로 소스 코드를 빌드해 jar 파일(이하 아티팩트)을 만든다.

그 다음엔 ftp 앱으로 아티팩트를 원격 서버로 전송한다. 여기에는 파일질라를 썼다. 접속할 원격 서버 정보를 설정해 해당 서버의 파일 시스템에 접속한다. 그리고 로컬 머신에 있는 아티팩트를 원격 서버에 전송한다. 파일질라가 GUI 기반 앱이어서 마우스로 드래그&드롭해 파일을 전송했다.

마지막으로 로컬 머신에서 ssh로 원격 서버에 접속 후 애플리케이션을 실행한다.

#### 수동 배포 방식을 자동화하는 과정에서 만난 문제점과 해결 과정

수동 배포 과정을 정리한 후 자동화하는 과정에서 해결해야 할 점이 있었다. 이 중에는 전에는 생각하지 못했던 문제점도 있었다.

#### 수동 배포 과정을 자동화할 때 나타난 문제

1. **GUI 애플리케이션을 이용하는 작업은 그대로 자동화하기 어렵다**
아티팩트를 서버로 전송할 때 쓰는 filezilla는 GUI 기반 애플리케이션이기 때문에 파일을 전송하려면 마우스를 써야 한다. 만약 이 과정을 자동화한다면 마우스를 어디로 움직이고 어디를 클릭할지를 자동화해야하지 않을까 생각이 들었다. 하지만 이 방식은 현실적으로 불가능해 보였고, 대신 커맨드라인 기반으로 ftp를 실행할 수 있는 방법이 있는지 알아봤다.

2. **민감 정보를 관리하기 번거롭다**
DB 사용자 이름이나 비밀번호와 같은 민감정보를 공개된 장소에 노출하지 않기 위해 애플리케이션 실행 명령에 변수로 주입하는 방식을 이용했다. 이로 인해 애플리케이션 실행 명령이 다소 길어졌다.

{% highlight bash %}
java -jar sooldama-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev \
--SERVER_MYSQL_URL="good.db.url" \
--SERVER_MYSQL_PORT="good.db.port" \
--SERVER_MYSQL_DBNAME="good_db" \
--SERVER_MYSQL_USERNAME="good_developer" \
--SERVER_MYSQL_PASSWORD="verygood!" \
--SERVER_REDIS_HOST="fast.redis.host"
{% endhighlight %}

새로 배포할 때마다 길다란 애플리케이션 실행 명령을 일일이 치기는 번거로워서 쉘 스크립트로 만들어 원격 서버 안에 두고 썼다. 공개된 장소에 민감 정보를 노출하지 않지만, 관리가 번거로웠다. 스크립트로 만들기는 했지만, 사람이 직접 입력해야 하고, 주입할 값이 바뀌면 애플리케이션을 실행할 모든 원격 서버에 일일이 접속해서 바꿔줘야 할테고 서버가 늘어나면 이런 작업이 더 생기게 되어 더 번거로워질 것이었다. 유지보수가 용이하면서도 민감 정보를 공개된 장소에 노출하지 않을 수 있는 방법을 찾아봐야 했다.

#### 전에 생각하지 못했던 문제

1. **애플리케이션이 실행 도중 멈출 수 있다**
원격 서버에서 foreground 방식으로 애플리케이션을 실행했다. 이 경우 로컬 머신이 원격 서버와 맺은 ssh 연결이 끊어지면 애플리케이션이 더 이상 실행되지 않는다. 기존에는 새로 배포한 뒤 api 요청해서 생각한대로 동작하는지 확인할 때까지만 애플리케이션이 실행 중이면 되었어서 이 점에 대해 고려하지 않았다.
비록 토이 프로젝트지만 실제로 운영하는 서비스를 염두해두고 구현하고 있었는데, 그렇다면 사용자에게 끊김 없이 서비스를 제공해야 해야한다고 생각했다. 하지만 기존 배포 방식으로는 ssh 연결이 끊어지면 서비스가 유지되지 않고 끊어지므로 문제였다. ssh 연결이 끊어지더라도 원격 서버에서 계속해서 애플리케이션이 실행되도록  할 수 있는 방법을 찾아봐야 했다.

2. **새로 배포한 애플리케이션을 실행하면 기존에 실행 중인 애플리케이션이 멈추지 않는다**
만약 이전 버전 애플리케이션 실행 도중 새로 전송한 아티팩트로 애플리케이션을 실행한다면, 같은 서버에 서로 다른 버전의 애플리케이션이 동시에 실행될 수 있다. 그러면 애플리케이션 버전이 달라도 포트 번호는 같으므로 사용자가 요청한 api를 어느 버전 애플리케이션에서 응답할지 알 수 없고, 새로 배포할 때마다 애플리케이션이 프로세스에 생길 것이다.
따라서 만약 원격 서버에 실행 중인 애플리케이션이 있다면 중단하고 새로운 애플리케이션을 띄우는 방법을 찾아봐야 했다.

### 어떻게 배포 자동화를 구현했나

**어떤 기술을 활용해서 구현할지**

프로젝트에서 이미 쓰는 기술 중에 자동화에 적용할 수 있는 기술이 있다면 그 기술을 썼다. 이외 자동화할 과정에 적용할 기술이 정해지지 않은 것은 이미 쓰는 기술과 잘 연동되는 것이 있는지 찾아봤다.
예를 들어 CD 구현에 쓸 기술의 경우, 프로젝트에서 이전에 CI(빌드와 테스트를 자동으로 실행)를 깃헙 액션으로 구현했는데, 그래서 CD에도 깃헙 액션을 이용하기로 했다. 젠킨스도 고려했지만, 이전에 CI 구현할 때 알아본 내용을 참고할 수 있으니 다른 기술을 새로 알아보는 데 시간을 들이는 것에 비해 효율적이라고 생각했다.

**이용한 기술**

CD 툴로는 깃헙 액션을 썼다. CD에 들어갈 자동화 작업 중 바로 가져다 쓸 수 있는 액션이 있는 경우는 그걸 쓰고, 없다면 쉘 스크립트로 만들어서 깃헙 액션 yaml 스크립트에 넣었다.
민감 정보 암호화는 깃허브에서 제공하는 깃헙 시크릿을 썼다.
원격 서버는 기존에 에프랩 교육 과정에서 제공받은 네이버 클라우드 크레딧으로 구성했다.

**전체 과정**

1. 파일 전송: 원격 서버로 아티팩트를 전송하기 이전에 먼저 깃헙액션 서버로 아티팩트를 전송하고, 깃헙액션 서버에서 원격 서버로 아티팩트를 전송한다.

**파일 전송 자동화**

깃헙액션에서 ftp 기능을 쓸 수 있도록 구현된 액션을 가져다 썼다.

**원격 서버에 접속하기**

원격 서버가 전송받은 아티팩트로 애플리케이션을 띄우려면 로컬에서 원격 서버로 직접 접속하지 않고, 깃헙 액션 서버에서 원격 서버에 ssh로 접속해 필요한 쉘 명령을 실행해야 한다.

**ssh 연결이 끊어지더라도 원격 서버에서 애플리케이션 실행 중지되지 않도록 하기**

**애플리케이션 실행 전에 이전에 실행 중이던 애플리케이션 중지하기**

서버가 이전에 실행 중인 애플리케이션이 있다면 중지하기 위해 pgrep으로 프로세스 확인 후 kill로 해당 프로세스를 멈춘다
깃헙 액션 파일 안에서 쉘 명령을 실행할 경우 원격 서버에서 실행 중인 애플리케이션 프로세스 번호를 찾지 못하는 문제가 있었다. 깃헙 액션 파일 안에서 여러 가지 시도를 해봤지만, 프로세스를 찾지 못해 이 부분을 스크립트로 추출해서 따로 실행하도록 만들었다.

**애플리케이션을 실행하는 명령**

애플리케이션을 다시 실행하는 명령의 경우, 같은 환경이 설정된 서버 두 대에 동일한 명령으로 애플리케이션을 실행하기 때문에 하나의 명령으로 두 개의 서버에 적용할 수 있도록 하려고 했지만, 사용하는 ssh action에서 원래 제공하지 않는건지, 가능하지 않아서 각 서버마다 따로 명령을 실행하도록 구현했다.
이렇게 구현할 경우 생길 수 있는 문제는 서버 대수가 늘어날수록 깃헙 액션 코드가 늘어날 테고, 변경해야 할 경우 바꿔야 할 코드의 양이 증가할 것이다. 이 부분은 더 고민해봐야겠다는 생각을 했다.

**민감 정보를 외부에 노출하지 않을 방법 (유지 보수가 용이한)**

깃헙 액션에서 github secret 서비스를 이용해 서버 아이디나 비밀번호 같은 민감 정보를 암호화해 이들 정보를 외부에 노출하지 않도록 할 수 있다.
github secret은 github action을 정의한 yml 파일 안에서만 쓸 수 있기 때문에, 깃헙 액션 스크립트에서 잘 동작하지 않는 부분을 바깥으로 뺄 때 github secret을 써야 하는 부분은 제외하고 빼야 했다. 작동 중인 애플리케이션 프로세스를 찾고, 중지하는 과정에서 이런 조치가 필요했다.

### 느낀 점

인터넷에서 찾을 수 있는 자료는 많지만, 내 상황에 딱 들어맞는 예제를 찾기는 쉽지 않다. 찾는 데 시간을 쏟기보다는 내가 처한 상황에서 자동화해야 할 문제를 분석하고 그에 맞는 해결책을 찾는 게 오히려 더 효율적이었던 것 같다.

참고할 자료를 찾으려고 블로그를 검색해보면 내 상황에 딱 맞는 구현을 찾기 어렵고, 찾았더라도 왜 그런 식으로 구현했는지 잘 설명되어 있는 글이 아닐 경우가 많았다. 글이 오래 되었다면 그 때와 달라진 API 때문에 현재 API에 맞추느라 애를 먹는 경우도 있다.

막연하게 생각만 했을 때보다 실제로 어떻게 구현할지를 고민하면서 생각하지 못했던 점들을 발견했다.

자동화한 이후로 배포 과정 중 생길 수 있는 실수를 걱정하지 않아도 되게 되었다. 때문에 언제든 배포해서 테스트해봐야 하면 바로 배포해볼 수 있게 되었다.

비록 자동화를 구현했지만, 막상 자동화 툴로 쓴 깃헙 액션에 대해서는 쓸만한 내용이 없다는 점에서 배포 자동화 도구에 대한 이해가 깊지 않다는 걸 느꼈고, 더 공부가 필요하다고 느꼈다. 또한 깃헙 액션으로 스크립트를 짤 때 쓴 쉘 스크립트의 동작도 잘 모르는 부분이 많은 것을 알았다.

하지만 여기 나온 내용은 자동화를 시도할 때 충분히 유용할 것이라고 생각한다.
