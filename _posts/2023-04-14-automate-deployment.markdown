---
layout: post
title: 자동화, 어떻게 시작해야할까?
date: 2023-04-14 21:18:23
categories: 
---
* table of contents
{:toc}

&nbsp;

개발자는 반복적인 작업을 자동화함으로써 더 중요한 업무에 집중하기 위해 노력한다. 토이 프로젝트이던, 회사에서 하는 업무던지 간에, 프로그램을 짜다보면 '이거 자동화하면 편할 것 같은데?' 싶을 때가 종종 있다. 하지만 실제로 자동화하려고 했을 때 어떻게 해야할지 막막한 상태로 시간만 허비한 적이 많았다. 이 글에서는 내가 배포 작업을 자동화하면서 하게 되었던 고민을 어떻게 풀어냈는지를 통해 반복 업무를 자동화할 때 참고할 만한 점을 공유하려고 한다.

&nbsp;

### 시작하기 전에 먼저...

#### 자동화로 얻을 손익을 따져보자

다른 작업과 마찬가지로 자동화 작업 역시 시간과 품이 들어가는 작업이다. 자동화할 수 있는 작업이더라도 그 작업의 빈도가 낮거나 특별히 불편한 점이 없다면 자동화하지 않는 게 나을수도 있다. 

| ![손익 따져보기](/images/automate-deploy/xkcd-the_general_problem_kor.png) |
|:--------------------------------------------------------------------------:|
|                           xkcd 에피소드 974 [1]                            |

&nbsp;

배포 작업 자동화 구현도 시간이 많이 들어가는 작업이었다. 그런데도 나는 왜 자동화하기로 결정했을까?

- 배포 작업의 빈도가 높았다. 새로 기능을 구현하거나 버그를 고치기 위해 소스 코드를 변경하면, 이 변경 사항을 서버에 반영해야했기 때문이다.
- 배포 작업을 완료하기까지 반복적인 명령을 입력하는 단계가 많았다. 그렇다보니 명령을 잘못 입력해서 작업 시간이 늘어나기도 했다.
- 실행 명령을 입력하기가 번거로웠다. 민감정보(ex. DB 사용자명이나 비밀번호 등)를 노출하지 않으려고 명령에 환경 변수로 추가해서 입력해야할 명령이 길어졌기 때문이다.
- 프로젝트에 스케일 아웃을 도입하면서 배포 과정에 드는 시간이 두 배로 늘어났고, 덩달아 관리할 민감 정보도 두 배로 늘어났다.

실행 명령을 스크립트로 만들어서 배포할 때마다 명령 입력에 드는 시간을 줄여보기도 했지만, 그다지 깔끔한 해결책은 아니었다. 주입할 값이 바뀌거나 스케일 아웃으로 서버가 늘어나면 원격 서버마다 스크립트를 수정해야 했기 때문이다.

배포 작업을 자동화한다면 배포하면서 생길 수 있는 실수를 줄이고, 배포에 걸리는 시간을 줄일 수 있을 것 같았다. 그래서 시간을 들일만한 작업이라고 판단해 배포 자동화를 구현하기로 했다.
&nbsp;

&nbsp;

#### 뭐부터 시작해야할까?

실제로 해보려고 하면, 자동화를 어떻게 시작할지 막연했다. 배포 작업을 자동화하기 시작할 때가 딱 그랬다. 뭐부터 해야하는 걸까? 기술 문서를 다 읽고 이해하면 어떻게 만들지 알 수 있을까? 고민하던 차에 예전에 읽었던 책에서 어떻게 해나갈지 힌트를 얻었다.


| ![책](/images/automate-deploy/automate-book.png){: width="300" height="400"} |
|:----------------------------------------------------------------------------:|
|                  \<시스템 관리자를 위한 시간관리 전략\> [2]                  |

&nbsp;
 
토머스 리먼첼리가 쓴 \<시스템 관리자를 위한 시간관리 전략\> 에서는 어떤 작업을 자동화할 때 단계적으로 해나갈 것을 제안한다. 비록 배포 자동화에 대해 설명하진 않지만, 해야 할 작업을 계획하는 데 책에 나온 내용을 참고할 수 있었다.

&nbsp;

&nbsp;

### 자동화해보자

토머스 리먼첼리는 자동화할 때 다음과 같은 순서로 진행하라고 조언한다.

1. 자동화하려는 작업을 수동으로도 수행할 수 있음을 확인하고, 각 단계를 문서로 기록한다.
2. 각 단계를 자동화한다. 각 단계를 자동화한 코드가 올바른지 테스트한다.
3. 모든 단계를 하나로 합친다. 한 단계씩 합치면서 단계를 추가할 때마다 테스트한다.
4. 전체 과정을 테스트한다.

나는 책에서 제시하는 단계를 그대로 따라하기보단 어렵지 않게 적용할 수 있는 부분은 적용하고, 적용하지 않은 단계는 나중에라도 필요해지면 적용했다.

#### 수동 작업 과정을 문서화해보자
 
우선 수동으로 배포 작업하는 과정을 문서로 정리했다. 자주 하는 작업일수록 그다지 어렵지 않게 문서화할 수 있고, 어떻게 수동으로 작업하고 있는지 손에 익었더라도 문서화하려고 적당한 단어를 생각하면서 정리가 되고, 문서화하고 나면 미처 몰랐던 부분을 알게 되기도 한다.

정리해보니 나는 수동 배포 작업을 이렇게 하고 있었다.

1. 로컬 머신에서 빌드 도구로 소스 코드를 빌드해 jar 파일(이하 아티팩트)을 만든다
2. ftp 앱으로 원격 서버에 접속해서 로컬 머신에 있는 아티팩트를 원격 서버로 전송한다
3. 로컬 머신에서 ssh로 원격 서버에 접속 후 애플리케이션을 실행한다

![수동 배포 과정](/images/automate-deploy/deploy-flow-manual.png)

&nbsp;

#### 수동 작업을 자동화하자

어떤 기술을 쓸지 조사한 후, 깃헙 액션으로 수동 작업을 자동화하기로 했다.
젠킨스나 깃헙액션 같은 기술을 처음부터 공부해보다가 그 방대함에 지치기도 했다.

대신 블로그나 기술 문서를 찾아봐도 내 상황과 비슷한 동작하는 예를 찾아서 내 상황에 맞게 바꾸면서 기술에 대해 조금씩 실습해보기로 했다.

기존 배포 작업을 깃헙 액션을 써서 구현하는 과정에서 앞서 정리한 작업 단계 이외에도 구현해야 하는 작업이 생겼다. 기존에는 로컬 머신이 모든 작업을 담당했지만, 이 역할을 깃헙 액션 서버가 담당하도록 바뀌었기 때문이다. 깃헙 액션을 적용하면 기존 배포 과정은 이렇게 달라지게 된다.

![자동 배포 과정](/images/automate-deploy/deploy-flow-automatic-one-server.png)

위에서 볼 수 있듯, 로컬 머신의 역할은 변경한 소스 코드를 깃헙 저장소에 푸시하는 것으로 줄어들었다. 그러고 나면 깃헙 액션의 서버가 나머지 일을 처리한다.

깃헙 액션에서는 작업을 밑바닥부터 구현하지 않고 간단히 가져다가 쓸 수 있도록 해주는 '액션'이 있다. 만약 자동화하려는 배포 작업의 각 단계 중 쓸 수 있는 액션이 있다면 활용하고, 없을 경우만 구현했다.

파일 전송 자동화에는 깃헙액션에서 ftp 기능을 쓸 수 있도록 구현된 액션을 가져다 썼다.

원격 서버가 전송받은 아티팩트로 애플리케이션을 띄우려면 로컬에서 원격 서버로 직접 접속하지 않고, 깃헙 액션 서버에서 원격 서버에 ssh로 접속해 필요한 쉘 명령을 실행해야 한다.

공식 문서와 블로그를 조사해 어떤 식으로 구현할지 보고, 내 상황에 맞게 바꿔나가면서 모르는 부분을 조사하면서 진행했다.

파일 전송: 원격 서버로 아티팩트를 전송하기 이전에 먼저 깃헙액션 서버로 아티팩트를 전송하고, 깃헙액션 서버에서 원격 서버로 아티팩트를 전송한다.

&nbsp;

#### 잘 동작하는지 테스트로 확인하자

구현한 게 한 번에 잘 동작하면 좋겠지만, 그렇지 않은 경우가 대부분이다. 그래서 잘 동작하는지 테스트해야 한다. 이때 단계별로 동작을 확인하는 것이 좋다. 나는 코드를 전부 짠 상태에서 작동하지 않는 것을 확인하고 테스트를 했는데, 단계별로 테스트하지 않았기 때문에 문제의 원인이 되는 곳의 범위를 좁히기 어려웠다. 그래서 테스트하려는 단계 이후 단계는 모두 주석처리해서 단계별로 테스트했다.

스크립트를 짜서 확인할 수도 있지만 만약 여의치 않다면 수동으로 테스트하는 것도 방법이다. 나는 배포 자동화를 테스트할 원격 저장소를 만들어 테스트했다. 자동 배포가 트리거되도록 한 뒤 예상한 동작을 하는지 반복해서 확인하고, 문제가 있으면 바꾸는 식이었다.

테스트할 때 피드백 주기가 적절히 짧은가? 배포 자동화의 발동 조건은 PR을 메인 브랜치로 머지했을 때였지만, 이 조건대로 테스트하려면 테스트 결과를 한 번 확인하는 데 시간이 너무 오래 걸렸다. 대신 원격 저장소에 push하는 걸로 테스트 조건을 설정해서 피드백을 얻기까지 걸리는 시간을 줄였다.

&nbsp;

&nbsp;

### 고려할 점들

#### 자동화할 때 쓸 기술을 정하자

정리한 수동 배포 과정을 토대로 각 단계를 자동화했다. 이때 어떤 기술을 써야할지 고민했다. 나는 이런 점을 중점적으로 생각했다.

- 프로젝트에서 이미 쓰고 있는 기술을 적용할 수 있는지 확인했다. 가용한 다른 툴이 있더라도 다른 기술을 선택할 경우 어떻게 쓰는지 익히는 데 드는 시간이 더 걸릴 수도 있기 때문이었다.
- 직접 구현하지 않더라도 가져다 쓸 수 있는 플러그인이 있는지 확인했다. 해당 기술에서 자동화할 작업 단계 중 바로 쓸 수 있게 구현해놓은 것이 있다면 어떻게 쓸지만 알면 되니까 구현에 드는 시간이 줄어든다.

위 사항을 고려해 깃헙 액션을 이용하기로 결정했다. 프로젝트에서 이미 쓰고 있던 깃헙 액션을 적용할 수 있었고, 미리 구현된 플러그인(액션)이 있어서 구현하지 않고 가져다 쓸 수 있었기 때문이다.

&nbsp;

#### 자동화 발동 조건을 고려하자

작업을 언제 자동으로 실행해야할지도 정해야 한다. 나는 프로젝트 상황을 고려해 PR이 메인 브랜치에 머지되었을 때 배포 자동화를 실행하도록 했다.

자동화 발동 조건은 이 외에도 crontab 등을 써서 특정 시간마다 실행되게 할 수도 있고, 스크립트로 만들어 명령 입력 시 실행되게 할 수도 있다.

깃헙 액션에서는 깃허브 저장소에 특정 이벤트 발생을 작업을 자동으로 실행할 트리거 조건으로 설정할 수 있다.

&nbsp;

#### 예상치 못한 문제가 생길수도 있다

자동화하는 과정에서 추가로 해결해야 할 점을 발견했다.

1. **GUI 애플리케이션을 이용하는 작업은 그대로 자동화하기 어렵다**
아티팩트를 서버로 전송할 때 쓰는 filezilla는 GUI 기반 애플리케이션이기 때문에 파일을 전송하려면 마우스를 써야 한다. 만약 이 과정을 자동화한다면 마우스를 어디로 움직이고 어디를 클릭할지를 자동화해야하지 않을까 생각이 들었다. 하지만 이 방식은 현실적으로 불가능해 보였고, 대신 커맨드라인 기반으로 ftp를 실행할 수 있는 방법이 있는지 알아봤다.

&nbsp;

&nbsp;

### 결론

자동화한 이후로 배포 과정 중 생길 수 있는 실수를 걱정하지 않아도 되게 되었다. 때문에 언제든 배포해서 테스트해봐야 하면 바로 배포해볼 수 있게 되었다.

인터넷에서 찾을 수 있는 자료는 많지만, 내 상황에 딱 들어맞는 예제를 찾기는 쉽지 않다. 찾는 데 시간을 쏟기보다는 내가 처한 상황에서 자동화해야 할 문제를 분석하고 그에 맞는 해결책을 찾는 게 오히려 더 효율적이었다.

막연하게 생각만 했을 때보다 실제로 어떻게 구현할지를 고민하면서 생각하지 못했던 점들을 발견했다.

비록 자동화를 구현했지만, 막상 자동화 툴로 쓴 깃헙 액션에 대해서는 쓸만한 내용이 없다는 점에서 배포 자동화 도구에 대한 이해가 깊지 않다는 걸 느꼈고, 더 공부가 필요하다고 느꼈다. 또한 깃헙 액션으로 스크립트를 짤 때 쓴 쉘 스크립트의 동작도 잘 모르는 부분이 많은 것을 알았다.

애플리케이션을 실행하는 명령의 경우, 같은 환경이 설정된 서버 두 대에 동일한 명령으로 애플리케이션을 실행하기 때문에 하나의 명령으로 두 개의 서버에 적용할 수 있도록 하려고 했지만, 사용하는 ssh action에서 원래 제공하지 않는건지, 가능하지 않아서 각 서버마다 따로 명령을 실행하도록 구현했다.
이렇게 구현할 경우 생길 수 있는 문제는 서버 대수가 늘어날수록 깃헙 액션 코드가 늘어날 테고, 변경해야 할 경우 바꿔야 할 코드의 양이 증가할 것이다. 이 부분은 더 고민해봐야겠다는 생각을 했다.

&nbsp;

---
[1] 원본은 [https://xkcd.com/974](https://xkcd.com/974/), 번역본은 [여기](https://twitter.com/nagato708/status/736477592023224320?s=20)서 확인할 수 있다. 
[2] 시스템 관리자를 위한 시간관리 전략. 토머스 리먼첼리 저, 한빛 미디어. 현재 절판 상태다. 도서관에서 빌려 보거나 중고 도서를 구매해야 볼 수 있다.
